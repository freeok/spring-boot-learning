<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="work.pcdd.mybatis.mapper.AuthorMapper">

    <resultMap id="authorMap" type="author">
        <id property="authorId" column="author_id"/>
        <result property="name" column="name"/>
        <!-- 一对多关系：一个作者可以有多篇文章 -->
        <collection property="articles" ofType="article">
            <id property="articleId" column="article_id"/>
            <result property="title" column="title"/>
            <result property="content" column="content"/>
        </collection>
    </resultMap>

    <!--
        一对多内连接：查询某作者，以及其所有文章
        使用 WHERE 子句将作者和文章表连接，并且额外的限制条件 t1.author_id = 1 会筛选出作者 ID 为 1 的作者，并且不会出现重复的结果。
        如果你想要只获取特定作者的文章，并且不希望出现重复的作者记录，使用 WHERE 子句的内连接是更合适的选择。
    -->
    <select id="findByInnerJoin" resultMap="authorMap">
        select *
        FROM author t1, article t2
        WHERE t1.author_id = t2.author_id
        <if test="id!=null">
            and t1.author_id = #{authorId}
        </if>
    </select>

    <!--
        一对多左外连接，
        使用 LEFT JOIN 会将所有作者与其对应的文章关联起来，并且额外的限制条件 t1.author_id = 1 会过滤掉不符合条件的记录。
        但是由于使用了 LEFT JOIN，即使作者没有对应的文章，也会显示该作者的记录，只不过对应的文章信息会填充为 NULL。
    -->
    <select id="findByLeftJoin" resultMap="authorMap">
        select *
        from author t1
        left join article t2 on t1.author_id = t2.author_id
        <if test="id!=null">
            and t1.author_id = #{authorId}
        </if>
    </select>

</mapper>
